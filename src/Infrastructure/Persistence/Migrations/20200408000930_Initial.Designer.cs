// <auto-generated />
using System;
using Codidact.Core.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Codidact.Core.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200408000930_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:audit.history_activity_type", "CREATE,UPDATE_BEFORE,UPDATE_AFTER,DELETE")
                .HasAnnotation("Npgsql:Enum:post_type", "question,answer,blog")
                .HasAnnotation("Npgsql:PostgresExtension:adminpack", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long?>("Calculations")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("calculations")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("ContributesToTrustLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contributes_to_trust_level")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnName("is_primary")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("LongExplanation")
                        .HasColumnName("long_explanation")
                        .HasColumnType("text");

                    b.Property<long>("ParticipationMinimumTrustLevelId")
                        .HasColumnName("participation_minimum_trust_level_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortExplanation")
                        .HasColumnName("short_explanation")
                        .HasColumnType("text");

                    b.Property<string>("UrlPart")
                        .HasColumnName("url_part")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_categories_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_categories_last_modified_by_member_id");

                    b.HasIndex("ParticipationMinimumTrustLevelId")
                        .HasName("ix_categories_participation_minimum_trust_level_id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CategoryHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long?>("Calculations")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("calculations")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("ContributesToTrustLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contributes_to_trust_level")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrimary")
                        .HasColumnName("is_primary")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("LongExplanation")
                        .HasColumnName("long_explanation")
                        .HasColumnType("text");

                    b.Property<string>("ShortExplanation")
                        .HasColumnName("short_explanation")
                        .HasColumnType("text");

                    b.Property<string>("UrlPart")
                        .HasColumnName("url_part")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("HistoryId")
                        .HasName("category_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_category_histories_history_activity_member_id");

                    b.ToTable("category_histories","audit");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CategoryPostType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostTypeId")
                        .HasColumnName("post_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_category_post_types");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_category_post_types_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_category_post_types_last_modified_by_member_id");

                    b.HasIndex("CategoryId", "PostTypeId")
                        .IsUnique()
                        .HasName("category_post_type_category_post_type_uc");

                    b.ToTable("category_post_types");

                    b.HasComment("CategoryPostType");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CategoryPostTypeHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostTypeId")
                        .HasColumnName("post_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("category_post_type_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_category_post_type_histories_history_activity_member_id");

                    b.ToTable("category_post_type_histories","audit");

                    b.HasComment("CategoryPostType");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Downvotes")
                        .HasColumnName("downvotes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetVotes")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("net_votes")
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("(upvotes - downvotes)");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnName("parent_comment_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Score")
                        .HasColumnName("score")
                        .HasColumnType("numeric");

                    b.Property<long>("Upvotes")
                        .HasColumnName("upvotes")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_comments_created_by_member_id");

                    b.HasIndex("DeletedByMemberId")
                        .HasName("ix_comments_deleted_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_comments_last_modified_by_member_id");

                    b.HasIndex("MemberId")
                        .HasName("ix_comments_member_id");

                    b.HasIndex("ParentCommentId")
                        .HasName("ix_comments_parent_comment_id");

                    b.HasIndex("PostId")
                        .HasName("ix_comments_post_id");

                    b.ToTable("comments");

                    b.HasComment("Table for the comments on posts, both questions and answers.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CommentHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Downvotes")
                        .HasColumnName("downvotes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetVotes")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("net_votes")
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("(upvotes - downvotes)");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnName("parent_comment_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Score")
                        .HasColumnName("score")
                        .HasColumnType("numeric");

                    b.Property<long>("Upvotes")
                        .HasColumnName("upvotes")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("comment_history_pk");

                    b.HasIndex("DeletedByMemberId")
                        .HasName("ix_comment_histories_deleted_by_member_id");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_comment_histories_history_activity_member_id");

                    b.ToTable("comment_histories","audit");

                    b.HasComment("Table for the comments on posts, both questions and answers.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CommentVote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("CommentId")
                        .HasColumnName("comment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("VoteTypeId")
                        .HasColumnName("vote_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_comment_votes");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_comment_votes_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_comment_votes_last_modified_by_member_id");

                    b.HasIndex("MemberId")
                        .HasName("ix_comment_votes_member_id");

                    b.HasIndex("VoteTypeId")
                        .HasName("ix_comment_votes_vote_type_id");

                    b.HasIndex("CommentId", "MemberId")
                        .IsUnique()
                        .HasName("comment_vote_comment_member_uc");

                    b.ToTable("comment_votes");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CommentVoteHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("CommentId")
                        .HasColumnName("comment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("VoteTypeId")
                        .HasColumnName("vote_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("comment_vote_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_comment_vote_histories_history_activity_member_id");

                    b.ToTable("comment_vote_histories","audit");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Bio")
                        .HasColumnName("bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnName("is_administrator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsModerator")
                        .HasColumnName("is_moderator")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSyncedWithNetworkAccount")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_synced_with_network_account")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsTemporarilySuspended")
                        .HasColumnName("is_temporarily_suspended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetworkAccountId")
                        .HasColumnName("network_account_id")
                        .HasColumnType("bigint")
                        .HasComment("link to 'network_account' table?");

                    b.Property<string>("ProfilePictureLink")
                        .HasColumnName("profile_picture_link")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TemporarySuspensionEndAt")
                        .HasColumnName("temporary_suspension_end_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TemporarySuspensionReason")
                        .HasColumnName("temporary_suspension_reason")
                        .HasColumnType("text");

                    b.Property<long>("TrustLevelId")
                        .HasColumnName("trust_level_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_members");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_members_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_members_last_modified_by_member_id");

                    b.HasIndex("TrustLevelId")
                        .HasName("ix_members_trust_level_id");

                    b.ToTable("members");

                    b.HasComment("This table will hold the global member records for a Codidact Instance. A member should only have one email to login with, that would be stored here. Does not include details such as password storage and hashing.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Bio")
                        .HasColumnName("bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnName("is_administrator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsModerator")
                        .HasColumnName("is_moderator")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSyncedWithNetworkAccount")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_synced_with_network_account")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsTemporarilySuspended")
                        .HasColumnName("is_temporarily_suspended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetworkAccountId")
                        .HasColumnName("network_account_id")
                        .HasColumnType("bigint")
                        .HasComment("link to 'network_account' table?");

                    b.Property<string>("ProfilePictureLink")
                        .HasColumnName("profile_picture_link")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TemporarySuspensionEndAt")
                        .HasColumnName("temporary_suspension_end_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TemporarySuspensionReason")
                        .HasColumnName("temporary_suspension_reason")
                        .HasColumnType("text");

                    b.Property<long>("TrustLevelId")
                        .HasColumnName("trust_level_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("member_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_member_histories_history_activity_member_id");

                    b.ToTable("member_histories","audit");

                    b.HasComment("This table will hold the global member records for a Codidact Instance. A member should only have one email to login with, that would be stored here. Does not include details such as password storage and hashing.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberPrivilege", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSuspended")
                        .HasColumnName("is_suspended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PrivilegeId")
                        .HasColumnName("privilege_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PrivilegeSuspensionEndAt")
                        .HasColumnName("privilege_suspension_end_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PrivilegeSuspensionStartAt")
                        .HasColumnName("privilege_suspension_start_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_member_privileges");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_member_privileges_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_member_privileges_last_modified_by_member_id");

                    b.HasIndex("PrivilegeId")
                        .HasName("ix_member_privileges_privilege_id");

                    b.HasIndex("MemberId", "PrivilegeId")
                        .IsUnique()
                        .HasName("member_privilege_member_privilege_uc");

                    b.ToTable("member_privileges");

                    b.HasComment("For recording which members have which privilege in a community. If a member has a privilege suspended, then that is also recorded here, and a nightly task will auto undo the suspension once the privelege_suspension_end_date has passed.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberPrivilegeHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSuspended")
                        .HasColumnName("is_suspended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PrivilegeId")
                        .HasColumnName("privilege_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PrivilegeSuspensionEndAt")
                        .HasColumnName("privilege_suspension_end_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PrivilegeSuspensionStartAt")
                        .HasColumnName("privilege_suspension_start_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("HistoryId")
                        .HasName("member_privilege_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_member_privilege_history_history_activity_member_id");

                    b.ToTable("member_privilege_history","audit");

                    b.HasComment("For recording which members have which privilege in a community. If a member has a privilege suspended, then that is also recorded here, and a nightly task will auto undo the suspension once the privelege_suspension_end_date has passed.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberSocialMediaType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialMediaId")
                        .HasColumnName("social_media_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_member_social_media_types");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_member_social_media_types_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_member_social_media_types_last_modified_by_member_id");

                    b.HasIndex("SocialMediaId")
                        .HasName("ix_member_social_media_types_social_media_id");

                    b.HasIndex("MemberId", "SocialMediaId")
                        .IsUnique()
                        .HasName("member_social_media_social_media_member_uc");

                    b.ToTable("member_social_media_types");

                    b.HasComment("The social media that the member would like to display in their community specific profile");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberSocialMediaTypeHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialMediaId")
                        .HasColumnName("social_media_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("member_social_media_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_member_social_media_type_histories_history_activity_member_~");

                    b.ToTable("member_social_media_type_histories","audit");

                    b.HasComment("The social media that the member would like to display in their community specific profile");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<long>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<short>("Downvotes")
                        .HasColumnName("downvotes")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAccepted")
                        .HasColumnName("is_accepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClosed")
                        .HasColumnName("is_closed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProtected")
                        .HasColumnName("is_protected")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetVotes")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("net_votes")
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("(upvotes - downvotes)");

                    b.Property<long?>("ParentPostId")
                        .HasColumnName("parent_post_id")
                        .HasColumnType("bigint");

                    b.Property<int>("PostTypeId")
                        .HasColumnName("post_type_id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Score")
                        .HasColumnName("score")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<short>("Upvotes")
                        .HasColumnName("upvotes")
                        .HasColumnType("smallint");

                    b.Property<long>("Views")
                        .HasColumnName("views")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("CategoryId")
                        .HasName("ix_posts_category_id");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_posts_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_posts_last_modified_by_member_id");

                    b.HasIndex("MemberId")
                        .HasName("ix_posts_member_id");

                    b.HasIndex("ParentPostId")
                        .HasName("ix_posts_parent_post_id");

                    b.HasIndex("PostTypeId")
                        .HasName("ix_posts_post_type_id");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostDuplicatePost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("DuplicatePostId")
                        .HasColumnName("duplicate_post_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginalPostId")
                        .HasColumnName("original_post_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_post_duplicate_posts");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_post_duplicate_posts_created_by_member_id");

                    b.HasIndex("DuplicatePostId")
                        .HasName("ix_post_duplicate_posts_duplicate_post_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_post_duplicate_posts_last_modified_by_member_id");

                    b.HasIndex("OriginalPostId", "DuplicatePostId")
                        .IsUnique()
                        .HasName("post_duplicate_post_original_post_duplicate_post_uc");

                    b.ToTable("post_duplicate_posts");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostDuplicatePostHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("DuplicatePostId")
                        .HasColumnName("duplicate_post_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginalPostId")
                        .HasColumnName("original_post_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("post_duplicate_post_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_post_duplicate_post_histories_history_activity_member_id");

                    b.ToTable("post_duplicate_post_histories","audit");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<long>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<short>("Downvotes")
                        .HasColumnName("downvotes")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAccepted")
                        .HasColumnName("is_accepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClosed")
                        .HasColumnName("is_closed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProtected")
                        .HasColumnName("is_protected")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetVotes")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("net_votes")
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("(upvotes - downvotes)");

                    b.Property<long?>("ParentPostId")
                        .HasColumnName("parent_post_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostTypeId")
                        .HasColumnName("post_type_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Score")
                        .HasColumnName("score")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<short>("Upvotes")
                        .HasColumnName("upvotes")
                        .HasColumnType("smallint");

                    b.Property<long>("Views")
                        .HasColumnName("views")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("post_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_post_histories_history_activity_member_id");

                    b.ToTable("post_histories","audit");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostStatusTypeId")
                        .HasColumnName("post_status_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_post_statuss");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_post_statuss_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_post_statuss_last_modified_by_member_id");

                    b.HasIndex("PostStatusTypeId")
                        .HasName("ix_post_statuss_post_status_type_id");

                    b.HasIndex("PostId", "PostStatusTypeId")
                        .IsUnique()
                        .HasName("post_status_post_status_type_post_uc");

                    b.ToTable("post_statuss");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostStatusHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostStatusTypeId")
                        .HasColumnName("post_status_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("post_status_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_post_status_histories_history_activity_member_id");

                    b.ToTable("post_status_histories","audit");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostStatusType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<short?>("Description")
                        .HasColumnName("description")
                        .HasColumnType("smallint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_post_status_types");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_post_status_types_created_by_member_id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasName("ix_post_status_types_display_name");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_post_status_types_last_modified_by_member_id");

                    b.ToTable("post_status_types");

                    b.HasComment("For setting the status of a post locked/featured etc");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostStatusTypeHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<short?>("Description")
                        .HasColumnName("description")
                        .HasColumnType("smallint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("post_status_type_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_post_status_type_histories_history_activity_member_id");

                    b.ToTable("post_status_type_histories","audit");

                    b.HasComment("For setting the status of a post locked/featured etc");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnName("tag_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_post_tags");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_post_tags_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_post_tags_last_modified_by_member_id");

                    b.HasIndex("TagId")
                        .HasName("ix_post_tags_tag_id");

                    b.HasIndex("PostId", "TagId")
                        .IsUnique()
                        .HasName("post_tag_post_tag_uc");

                    b.ToTable("post_tags");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostTagHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnName("tag_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("post_tag_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_post_tag_histories_history_activity_member_id");

                    b.ToTable("post_tag_histories","audit");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_post_types");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_post_types_created_by_member_id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasName("ix_post_types_display_name");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_post_types_last_modified_by_member_id");

                    b.ToTable("post_types");

                    b.HasComment("Records the type of post, question/answer/blog etc");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostTypeHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("post_type_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_post_type_histories_history_activity_member_id");

                    b.ToTable("post_type_histories","audit");

                    b.HasComment("Records the type of post, question/answer/blog etc");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostVote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("bigint");

                    b.Property<long>("VoteTypeId")
                        .HasColumnName("vote_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_post_votes");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_post_votes_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_post_votes_last_modified_by_member_id");

                    b.HasIndex("MemberId")
                        .HasName("ix_post_votes_member_id");

                    b.HasIndex("VoteTypeId")
                        .HasName("ix_post_votes_vote_type_id");

                    b.HasIndex("PostId", "MemberId")
                        .IsUnique()
                        .HasName("post_vote_post_member_uc");

                    b.ToTable("post_votes");

                    b.HasComment("The reason for this table is so that votes by spammers/serial voters can be undone.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostVoteHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("bigint");

                    b.Property<long>("VoteTypeId")
                        .HasColumnName("vote_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("post_vote_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_post_vote_histories_history_activity_member_id");

                    b.ToTable("post_vote_histories","audit");

                    b.HasComment("The reason for this table is so that votes by spammers/serial voters can be undone.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Privilege", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_privileges");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_privileges_created_by_member_id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasName("privilege_display_name_uc");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_privileges_last_modified_by_member_id");

                    b.ToTable("privileges");

                    b.HasComment("Table for privileges");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PrivilegeHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("privilege_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_privilege_histories_history_activity_member_id");

                    b.ToTable("privilege_histories","audit");

                    b.HasComment("Table for privileges");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_settings_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_settings_last_modified_by_member_id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.SettingHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("setting_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_setting_histories_history_activity_member_id");

                    b.ToTable("setting_histories","audit");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.SocialMediaType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("AccountUrl")
                        .IsRequired()
                        .HasColumnName("account_url")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_social_media_types");

                    b.HasIndex("AccountUrl")
                        .IsUnique()
                        .HasName("social_media_type_account_url_uc");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_social_media_types_created_by_member_id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasName("social_media_type_display_name_uc");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_social_media_types_last_modified_by_member_id");

                    b.ToTable("social_media_types");

                    b.HasComment("The types of social media that the member can display in their profile");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.SocialMediaTypeHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("AccountUrl")
                        .IsRequired()
                        .HasColumnName("account_url")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("social_media_type_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_social_media_type_histories_history_activity_member_id");

                    b.ToTable("social_media_type_histories","audit");

                    b.HasComment("The types of social media that the member can display in their profile");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentTagId")
                        .HasColumnName("parent_tag_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("SynonymTagId")
                        .HasColumnName("synonym_tag_id")
                        .HasColumnType("bigint");

                    b.Property<string>("TagWiki")
                        .HasColumnName("tag_wiki")
                        .HasColumnType("text");

                    b.Property<long>("Usages")
                        .HasColumnName("usages")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("Body")
                        .IsUnique()
                        .HasName("tag_body_uc");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_tags_created_by_member_id");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_tags_last_modified_by_member_id");

                    b.HasIndex("ParentTagId")
                        .HasName("ix_tags_parent_tag_id");

                    b.ToTable("tags");

                    b.HasComment("Table for all of the tags");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.TagHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("HistoryActivityMemberId1")
                        .HasColumnName("history_activity_member_id1")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentTagId")
                        .HasColumnName("parent_tag_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("SynonymTagId")
                        .HasColumnName("synonym_tag_id")
                        .HasColumnType("bigint");

                    b.Property<string>("TagWiki")
                        .HasColumnName("tag_wiki")
                        .HasColumnType("text");

                    b.Property<long>("Usages")
                        .HasColumnName("usages")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("tag_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_tag_histories_history_activity_member_id");

                    b.HasIndex("HistoryActivityMemberId1")
                        .HasName("ix_tag_histories_history_activity_member_id1");

                    b.ToTable("tag_histories","audit");

                    b.HasComment("Table for all of the tags - history");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.TrustLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnName("explanation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_trust_levels");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_trust_levels_created_by_member_id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasName("trust_level_display_name_uq");

                    b.HasIndex("Explanation")
                        .IsUnique()
                        .HasName("trust_level_explanation_uq");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_trust_levels_last_modified_by_member_id");

                    b.ToTable("trust_levels");

                    b.HasComment("Name for each trust level and an explanation of each that a user should get when they get to that level.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.TrustLevelHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnName("explanation")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("trust_level_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_trust_level_histories_history_activity_member_id");

                    b.ToTable("trust_level_histories","audit");

                    b.HasComment("Name for each trust level and an explanation of each that a user should get when they get to that level.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.VoteType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_vote_types");

                    b.HasIndex("CreatedByMemberId")
                        .HasName("ix_vote_types_created_by_member_id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasName("vote_type_display_name_uc");

                    b.HasIndex("LastModifiedByMemberId")
                        .HasName("ix_vote_types_last_modified_by_member_id");

                    b.ToTable("vote_types");

                    b.HasComment("Table for the vote types, upvote/downvote.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.VoteTypeHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoryActivityAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_activity_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("HistoryActivityMemberId")
                        .HasColumnName("history_activity_member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId")
                        .HasName("vote_type_history_pk");

                    b.HasIndex("HistoryActivityMemberId")
                        .HasName("ix_vote_type_histories_history_activity_member_id");

                    b.ToTable("vote_type_histories","audit");

                    b.HasComment("Table for the vote types, upvote/downvote.");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Category", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("CategoryCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("category_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("CategoryLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("category_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.TrustLevel", "ParticipationMinimumTrustLevel")
                        .WithMany("Category")
                        .HasForeignKey("ParticipationMinimumTrustLevelId")
                        .HasConstraintName("category_participation_minimum_trust_level_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CategoryHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("CategoryHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("category_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CategoryPostType", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("CategoryPostTypeCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("category_post_type_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("CategoryPostTypeLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("category_post_type_last_modified_by_member_fk");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CategoryPostTypeHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("CategoryPostTypeHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("category_post_type_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("CommentCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("comment_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "DeletedByMember")
                        .WithMany()
                        .HasForeignKey("DeletedByMemberId")
                        .HasConstraintName("fk_comments_members_deleted_by_member_id");

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("CommentLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("comment_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "Member")
                        .WithMany("CommentMember")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("comment_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("comment_parent_comment_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Post", "Post")
                        .WithMany("Comment")
                        .HasForeignKey("PostId")
                        .HasConstraintName("comment_post_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CommentHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "DeletedByMember")
                        .WithMany()
                        .HasForeignKey("DeletedByMemberId")
                        .HasConstraintName("fk_comment_histories_members_deleted_by_member_id");

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("CommentHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("comment_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CommentVote", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Comment", "Comment")
                        .WithMany("CommentVote")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("commentvote_comment_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("CommentVoteCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("comment_vote_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("CommentVoteLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("comment_vote_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "Member")
                        .WithMany("CommentVoteMember")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("comment_vote_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.VoteType", "VoteType")
                        .WithMany("CommentVote")
                        .HasForeignKey("VoteTypeId")
                        .HasConstraintName("comment_vote_vote_type_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.CommentVoteHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("CommentVoteHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("comment_vote_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Member", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("InverseCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("member_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("InverseLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("member_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.TrustLevel", "TrustLevel")
                        .WithMany("Member")
                        .HasForeignKey("TrustLevelId")
                        .HasConstraintName("member_trust_level_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("MemberHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("member_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberPrivilege", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("MemberPrivilegeCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("member_privilege_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("MemberPrivilegeLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("member_privilege_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "Member")
                        .WithMany("MemberPrivilegeMember")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("member_privilege_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Privilege", "Privilege")
                        .WithMany("MemberPrivilege")
                        .HasForeignKey("PrivilegeId")
                        .HasConstraintName("member_privilege_privlege_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberPrivilegeHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("MemberPrivilegeHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("member_privilege_histry_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberSocialMediaType", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("MemberSocialMediaTypeCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("member_social_media_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("MemberSocialMediaTypeLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("member_social_media_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "Member")
                        .WithMany("MemberSocialMediaTypeMember")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("member_social_media_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.SocialMediaType", "SocialMedia")
                        .WithMany("MemberSocialMediaType")
                        .HasForeignKey("SocialMediaId")
                        .HasConstraintName("member_social_media_social_media_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.MemberSocialMediaTypeHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("MemberSocialMediaTypeHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("member_social_media_type_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Post", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Category", "Category")
                        .WithMany("Post")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("post_category_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("PostCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("post_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("PostLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("post_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "Member")
                        .WithMany("PostMember")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("post_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Post", "ParentPost")
                        .WithMany("InverseParentPost")
                        .HasForeignKey("ParentPostId")
                        .HasConstraintName("post_parent_post_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.PostType", "PostType")
                        .WithMany("Post")
                        .HasForeignKey("PostTypeId")
                        .HasConstraintName("post_post_type_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostDuplicatePost", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("PostDuplicatePostCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("post_duplicate_post_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Post", "DuplicatePost")
                        .WithMany("PostDuplicatePostDuplicatePost")
                        .HasForeignKey("DuplicatePostId")
                        .HasConstraintName("post_duplicate_post_duplicate_post_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("PostDuplicatePostLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("post_duplicate_post_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Post", "OriginalPost")
                        .WithMany("PostDuplicatePostOriginalPost")
                        .HasForeignKey("OriginalPostId")
                        .HasConstraintName("post_duplicate_post_original_post_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostDuplicatePostHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("PostDuplicatePostHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("post_duplicate_post_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("PostHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("post_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostStatus", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("PostStatusCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("post_status_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("PostStatusLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("post_status_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Post", "Post")
                        .WithMany("PostStatus")
                        .HasForeignKey("PostId")
                        .HasConstraintName("post_status_post_id_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.PostStatusType", "PostStatusType")
                        .WithMany("PostStatus")
                        .HasForeignKey("PostStatusTypeId")
                        .HasConstraintName("post_status_post_status_type_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostStatusHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("PostStatusHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("post_status_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostStatusType", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("PostStatusTypeCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("post_status_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("PostStatusTypeLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("post_status_last_modified_by_member_fk");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostStatusTypeHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("PostStatusTypeHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("post_status_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostTag", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("PostTagCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("post_tag_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("PostTagLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("post_tag_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Post", "Post")
                        .WithMany("PostTag")
                        .HasForeignKey("PostId")
                        .HasConstraintName("post_tag_post_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTag")
                        .HasForeignKey("TagId")
                        .HasConstraintName("post_tag_tag_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostTagHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("PostTagHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("post_tag_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostType", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("PostTypeCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("post_type_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("PostTypeLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("post_type_last_modified_by_member_fk");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostTypeHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("PostTypeHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("post_type_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostVote", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("PostVoteCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("post_vote_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("PostVoteLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("post_vote_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "Member")
                        .WithMany("PostVoteMember")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("post_vote_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Post", "Post")
                        .WithMany("PostVote")
                        .HasForeignKey("PostId")
                        .HasConstraintName("post_vote_post_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.VoteType", "VoteType")
                        .WithMany("PostVote")
                        .HasForeignKey("VoteTypeId")
                        .HasConstraintName("post_vote_vote_type_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PostVoteHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("PostVoteHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("post_vote_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Privilege", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("PrivilegeCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("privilege_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("PrivilegeLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("privilege_last_modified_by_member");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.PrivilegeHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("PrivilegeHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("privilege_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Setting", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("SettingCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("setting_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("SettingLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("setting_last_modified_by_member_fk");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.SettingHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("SettingHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("setting_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.SocialMediaType", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("SocialMediaTypeCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("social_media_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("SocialMediaTypeLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("social_media_last_modified_by_member_fk");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.SocialMediaTypeHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("SocialMediaTypeHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("social_media_type_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("TagCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("tag_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("TagLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("tag_last_modified_by_member_fk");

                    b.HasOne("Codidact.Core.Domain.Entities.Tag", "ParentTag")
                        .WithMany("InverseParentTag")
                        .HasForeignKey("ParentTagId")
                        .HasConstraintName("tag_parent_tag_fk");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.TagHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryMember")
                        .WithMany("TagHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("tag_history_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany()
                        .HasForeignKey("HistoryActivityMemberId1")
                        .HasConstraintName("fk_tag_histories_members_history_activity_member_id1");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.TrustLevel", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("TrustLevelCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("TrustLevelLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("last_modified_by_member_fk");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.TrustLevelHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("TrustLevelHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("trust_level_history_member_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.VoteType", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "CreatedByMember")
                        .WithMany("VoteTypeCreatedByMember")
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("vote_type_created_by_member_fk")
                        .IsRequired();

                    b.HasOne("Codidact.Core.Domain.Entities.Member", "LastModifiedByMember")
                        .WithMany("VoteTypeLastModifiedByMember")
                        .HasForeignKey("LastModifiedByMemberId")
                        .HasConstraintName("vote_type_last_modified_by_member_fk");
                });

            modelBuilder.Entity("Codidact.Core.Domain.Entities.VoteTypeHistory", b =>
                {
                    b.HasOne("Codidact.Core.Domain.Entities.Member", "HistoryActivityMember")
                        .WithMany("VoteTypeHistory")
                        .HasForeignKey("HistoryActivityMemberId")
                        .HasConstraintName("vote_type_history_member_fk")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
